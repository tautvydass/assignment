// Code generated by MockGen. DO NOT EDIT.
// Source: assignment/server/server/listener (interfaces: QUICListener)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	quic "github.com/quic-go/quic-go"
)

// MockQUICListener is a mock of QUICListener interface.
type MockQUICListener struct {
	ctrl     *gomock.Controller
	recorder *MockQUICListenerMockRecorder
}

// MockQUICListenerMockRecorder is the mock recorder for MockQUICListener.
type MockQUICListenerMockRecorder struct {
	mock *MockQUICListener
}

// NewMockQUICListener creates a new mock instance.
func NewMockQUICListener(ctrl *gomock.Controller) *MockQUICListener {
	mock := &MockQUICListener{ctrl: ctrl}
	mock.recorder = &MockQUICListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQUICListener) EXPECT() *MockQUICListenerMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockQUICListener) Accept(arg0 context.Context) (quic.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept", arg0)
	ret0, _ := ret[0].(quic.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accept indicates an expected call of Accept.
func (mr *MockQUICListenerMockRecorder) Accept(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockQUICListener)(nil).Accept), arg0)
}

// Close mocks base method.
func (m *MockQUICListener) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockQUICListenerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQUICListener)(nil).Close))
}
