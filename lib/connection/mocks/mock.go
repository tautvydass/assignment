// Code generated by MockGen. DO NOT EDIT.
// Source: assignment/lib/connection (interfaces: ReadWriteStream)

// Package mocks is a generated GoMock package.
package mocks

import (
	connection "assignment/lib/connection"
	entity "assignment/lib/entity"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockReadWriteStream is a mock of ReadWriteStream interface.
type MockReadWriteStream struct {
	ctrl     *gomock.Controller
	recorder *MockReadWriteStreamMockRecorder
}

// MockReadWriteStreamMockRecorder is the mock recorder for MockReadWriteStream.
type MockReadWriteStreamMockRecorder struct {
	mock *MockReadWriteStream
}

// NewMockReadWriteStream creates a new mock instance.
func NewMockReadWriteStream(ctrl *gomock.Controller) *MockReadWriteStream {
	mock := &MockReadWriteStream{ctrl: ctrl}
	mock.recorder = &MockReadWriteStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadWriteStream) EXPECT() *MockReadWriteStreamMockRecorder {
	return m.recorder
}

// CloseStream mocks base method.
func (m *MockReadWriteStream) CloseStream() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseStream")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseStream indicates an expected call of CloseStream.
func (mr *MockReadWriteStreamMockRecorder) CloseStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseStream", reflect.TypeOf((*MockReadWriteStream)(nil).CloseStream))
}

// SendMessage mocks base method.
func (m *MockReadWriteStream) SendMessage(arg0 entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockReadWriteStreamMockRecorder) SendMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockReadWriteStream)(nil).SendMessage), arg0)
}

// SetConnClosedCallback mocks base method.
func (m *MockReadWriteStream) SetConnClosedCallback(arg0 connection.ConnClosedCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnClosedCallback", arg0)
}

// SetConnClosedCallback indicates an expected call of SetConnClosedCallback.
func (mr *MockReadWriteStreamMockRecorder) SetConnClosedCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnClosedCallback", reflect.TypeOf((*MockReadWriteStream)(nil).SetConnClosedCallback), arg0)
}

// SetMessageReceiver mocks base method.
func (m *MockReadWriteStream) SetMessageReceiver(arg0 connection.MessageReceiver) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMessageReceiver", arg0)
}

// SetMessageReceiver indicates an expected call of SetMessageReceiver.
func (mr *MockReadWriteStreamMockRecorder) SetMessageReceiver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMessageReceiver", reflect.TypeOf((*MockReadWriteStream)(nil).SetMessageReceiver), arg0)
}

// SetReadBufferSize mocks base method.
func (m *MockReadWriteStream) SetReadBufferSize(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReadBufferSize", arg0)
}

// SetReadBufferSize indicates an expected call of SetReadBufferSize.
func (mr *MockReadWriteStreamMockRecorder) SetReadBufferSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadBufferSize", reflect.TypeOf((*MockReadWriteStream)(nil).SetReadBufferSize), arg0)
}

// SetSendMessageTimeout mocks base method.
func (m *MockReadWriteStream) SetSendMessageTimeout(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSendMessageTimeout", arg0)
}

// SetSendMessageTimeout indicates an expected call of SetSendMessageTimeout.
func (mr *MockReadWriteStreamMockRecorder) SetSendMessageTimeout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSendMessageTimeout", reflect.TypeOf((*MockReadWriteStream)(nil).SetSendMessageTimeout), arg0)
}
